#include <iostream>
using namespace std;

const int UNIT = 8; //Tama√±o de caja en la tabla
const int LADT = (5*UNIT)+1; //Largo y Ancho De Tabla
string p1color = "b ";
string p2color = "w ";
int Xant = 3, Yant = 3; // X anterior, Y anterior

int grid[LADT][LADT] = {
        {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9},
        {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,1,1,1,1,1,9},
        {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9}
    };

string interpretar(int num) {
    string re; //variable para REtornar
    switch(num) {
        case 0:
            re = "!!"; //#c7c7c7 - light square color
            break;
        case 1:
            re = "OO"; //#751616 - dark square color
            break;
        case 2:
            re = p1color; //#xxxxxx - jugador elige color
            break;
        case 3:
            re = p2color; //#xxxxxx - jugador elige color
            break;
        case 7:
            re = "  "; //#fcdf00 - selector color
            break;
        case 9:
            re = "=="; //#000000 - black border color
            break;
        default:
            re = "  ";
            break;
    }
    return re;
}

void printGrid() {
    for(int j=0; j<LADT; j++) {
        for(int i=0; i<LADT; i++) {
            cout << interpretar(grid[j][i]);
        }
        cout << endl;
    }
}

void cuadroSeleccion(int x, int y) {
    int startPosX = UNIT * (x-1);
    int startPosY = UNIT * (y-1);
    for(int i=0; i<9; i++) {
        grid[startPosX][startPosY + i] = 7;
        grid[startPosX + i][startPosY] = 7;
        grid[startPosX + i][startPosY + UNIT] = 7;
        grid[startPosX + UNIT][startPosY + i] = 7;
    }
}

void revertirCuadro(int x, int y) {
    int startPosX = UNIT * (x-1);
    int startPosY = UNIT * (y-1);
    for(int i=0; i<9; i++) {
        grid[startPosX][startPosY + i] = 9;
        grid[startPosX + i][startPosY] = 9;
        grid[startPosX + i][startPosY + UNIT] = 9;
        grid[startPosX + UNIT][startPosY + i] = 9;
    }
}

void drawPlayer(int p, int x, int y) {
    int player;
    int startPosX = UNIT * (x-1) + 2;
    int startPosY = UNIT * (y-1) + 2;
    switch(p) {
        case 1:
            player = 2;
            break;
        case 2:
            player = 3;
            break;
    }
    for(int j=0; j<5; j++) {
        for(int i=0; i<5; i++) {
            if(j == 0 && i == 0) {
            } else if(j == 0 && i == 4) {
            } else if(j == 4 && i == 0) {
            } else if(j == 4 && i == 4) {
            } else {
                grid[startPosX + j][startPosY + i] = player;
            }
        }
    }
}

void borrarFicha(int x, int y) {
    int startPosX = UNIT * (x-1) + 2;
    int startPosY = UNIT * (y-1) + 2;
    if(x == y || (!(double(x)/2) && !(double(y)/2))) {
        for(int j=0; j<5; j++) {
            for(int i=0; i<5; i++) {
                grid[startPosX + j][startPosY + i] = 1;
            }
        }
    } else {
        for(int j=0; j<5; j++) {
            for(int i=0; i<5; i++) {
                grid[startPosX + j][startPosY + i] = 0;
            }
        }
    }
}

void mover(int *x, int *y) {
    char tecla;
    Xant = *x;
    Yant = *y;
    cin >> tecla;
    switch(tecla) {
        case 'w':
            if(*x != 1) *x = *x - 1;
            break;
        case 'a':
            if(*y != 1) *y = *y - 1;
            break;
        case 's':
            if(*x != 5) *x = *x + 1;
            break;
        case 'd':
            if(*y != 5) *y = *y + 1;
            break;
    }
}

int main() {
    bool play = true;
    int X = 3, Y = 3;
    int *ptrX = &X;
    int *ptrY = &Y;
    
    cuadroSeleccion(X,Y);
    while(play) {
        printGrid();
        mover(ptrX, ptrY);
        cout << "Current pos:" << X << " " << Y << endl;
        cout << "Last pos:" << Xant << " " << Yant << endl;
        revertirCuadro(Xant, Yant);
        cuadroSeleccion(X,Y);
    }
}